version: '3.8'

services:
  eureka-server:
    build:
      context: ./EurekaService
      dockerfile: Dockerfile
    image: eureka-server:latest
    ports:
      - "8761:8761"
    networks:
      - microservices-net

  gateway-api:
    build:
      context: ./GatewayService
      dockerfile: Dockerfile
    image: gateway-api:latest
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
    depends_on:
      - eureka-server
      - graph-service
      - relational-service
    ports:
      - "9000:9000"
    networks:
      - microservices-net

  graph-service:
    build:
      context: ./GraphDatabaseService
      dockerfile: Dockerfile
    image: graph-spring-example:latest
    depends_on:
      - eureka-server
      - neo4j
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_NEO4J_URI: "bolt://neo4j:7687"
      SPRING_NEO4J_USERNAME: neo4j
      SPRING_NEO4J_PASSWORD: password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka1:19091"
    command: [ "--spring.cloud.stream.kafka.binder.brokers=kafka1:19091", "--spring.cloud.stream.bindings.output.destination=tour-graph-event", "--spring.cloud.stream.kafka.bindings.output.producer.configuration.topic=tour-graph-event", "--spring.cloud.stream.kafka.bindings.output.producer.configuration.partitions=1" ]
    networks:
      - microservices-net

  relational-service:
    build:
      context: ./museumservice
      dockerfile: Dockerfile
    image: relational-service:latest
    depends_on:
      - postgresdb
      - eureka-server
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgresdb:5432/museum-ms-backend"
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: super
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka2:19092"
    command: [ "--spring.cloud.stream.kafka.binder.brokers=kafka2:19092", "--spring.cloud.stream.bindings.output.destination=tour-relational-event", "--spring.cloud.stream.kafka.bindings.output.producer.configuration.topic=tour-relational-event", "--spring.cloud.stream.kafka.bindings.output.producer.configuration.partitions=1" ]
    ports:
      - "8088:8088"
    networks:
      - microservices-net

  neo4j:
    image: neo4j
    restart: always
    container_name: neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/password
    volumes:
      - neo4j_data:/var/lib/neo4j/data
    networks:
      - microservices-net

  postgresdb:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: "museum-ms-backend"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "super"
    volumes:
      - data:/var/lib/postgresql/data
    networks:
      - microservices-net

  zoo:
    image: zookeeper:3.4.9
    hostname: zoo
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo:2888:3888
    volumes:
      - ./zk-single-kafka-multiple/zoo/data:/data
      - ./zk-single-kafka-multiple/zoo/datalog:/datalog
    networks:
      - microservices-net

  kafka1:
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka1
    ports:
      - "9091:9091"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19091,LISTENER_DOCKER_EXTERNAL://kafka1:9091
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    volumes:
      - ./zk-single-kafka-multiple/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zoo
    networks:
      - microservices-net

  kafka2:
    image: confluentinc/cp-kafka:5.3.0
    hostname: kafka2
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka2:19092,LISTENER_DOCKER_EXTERNAL://kafka2:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    volumes:
      - ./zk-single-kafka-multiple/kafka2/data:/var/lib/kafka/data
    depends_on:
      - zoo
    networks:
      - microservices-net

  manager:
    image: sheepkiller/kafka-manager
    ports:
      - "9090:9000"
    environment:
      - ZK_HOSTS=zoo:2181
    depends_on:
      - zoo
    networks:
      - microservices-net

volumes:
  data:
  neo4j_data:

networks:
  microservices-net:
    driver: bridge
